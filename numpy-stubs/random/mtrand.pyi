import builtins
from typing import (
    Any,
    List,
    overload,
    Optional,
    Sequence,
    Tuple,
    TypeVar,
    Union,
)
from numpy import ndarray

_Size = Union[int, Sequence[int]]
_T = TypeVar("_T")
_ArrayLike = Union[Sequence[_T], ndarray]
_ScalarOrArray = Union[_T, Sequence[_T], ndarray]

class RandomState:
    def __init__(
        self, state: Union[None, int, List[int], Tuple[int]] = ...
    ) -> None: ...
    @overload
    def beta(self, a: float, b: float, size: None = ...) -> float: ...
    @overload
    def beta(
        self, a: _ScalarOrArray[float], b: _ScalarOrArray[float], size: _Size
    ) -> ndarray: ...
    @overload
    def beta(
        self, a: _ArrayLike[float], b: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def beta(
        self, a: float, b: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def beta(
        self, a: _ArrayLike[float], b: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    def bytes(self, length: int) -> builtins.bytes: ...
    @overload
    def binomial(self, n: int, p: float, size: None = ...) -> int: ...
    @overload
    def binomial(
        self, n: _ScalarOrArray[int], p: _ScalarOrArray[float], size: _Size
    ) -> ndarray: ...
    @overload
    def binomial(
        self, n: _ArrayLike[int], p: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def binomial(
        self, n: int, p: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def binomial(
        self, n: _ArrayLike[int], p: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def chisquared(self, df: int, size: None = ...) -> float: ...
    @overload
    def chisquared(self, df: _ScalarOrArray[int], size: _Size) -> ndarray: ...
    @overload
    def chisquared(self, df: _ArrayLike[int], size: None = ...) -> ndarray: ...
    @overload
    def choice(
        self,
        a: int,
        size: None = ...,
        replace: bool = ...,
        p: Optional[_ArrayLike[float]] = ...,
    ) -> int: ...
    @overload
    def choice(
        self,
        a: Sequence[_T],
        size: None = ...,
        replace: bool = ...,
        p: Optional[_ArrayLike[float]] = ...,
    ) -> _T: ...
    @overload
    def choice(
        self,
        a: ndarray,
        size: None = ...,
        replace: bool = ...,
        p: Optional[_ArrayLike[float]] = ...,
    ) -> Any: ...
    @overload
    def choice(
        self,
        a: Union[int, ndarray],
        size: _Size,
        replace: bool = ...,
        p: Optional[_ArrayLike[float]] = ...,
    ) -> ndarray: ...
    def dirichlet(
        self, alpha: _ArrayLike[float], size: Optional[_Size] = ...
    ) -> ndarray: ...
    @overload
    def exponential(self, scale: float = ..., size: None = ...) -> float: ...
    @overload
    def exponential(
        self, scale: _ScalarOrArray[float], size: _Size
    ) -> ndarray: ...
    @overload
    def exponential(
        self, scale: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def f(self, dfnum: float, dfden: float, size: None = ...) -> float: ...
    @overload
    def f(
        self,
        dfnum: _ScalarOrArray[float],
        dfden: _ScalarOrArray[float],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def f(
        self, dfnum: _ArrayLike[float], dfden: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def f(
        self, dfnum: float, dfden: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def f(
        self,
        dfnum: _ArrayLike[float],
        dfden: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def gamma(
        self, shape: float, scale: float = ..., size: None = ...
    ) -> float: ...
    @overload
    def gamma(
        self,
        shape: _ScalarOrArray[float],
        scale: _ScalarOrArray[float],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def gamma(
        self, shape: _ArrayLike[float], scale: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def gamma(
        self, shape: float, scale: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def gamma(
        self,
        shape: _ArrayLike[float],
        scale: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def geometric(self, p: float, size: None = ...) -> float: ...
    @overload
    def geometric(self, p: _ScalarOrArray[float], size: _Size) -> ndarray: ...
    @overload
    def geometric(self, p: _ArrayLike[float], size: None = ...) -> ndarray: ...
    def get_state(self) -> Tuple[str, ndarray, int, int, float]: ...
    @overload
    def gumbel(
        self, loc: float = ..., scale: float = ..., size: None = ...
    ) -> float: ...
    @overload
    def gumbel(
        self,
        loc: _ScalarOrArray[float],
        scale: _ScalarOrArray[float],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def gumbel(
        self, loc: _ArrayLike[float], scale: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def gumbel(
        self, loc: float, scale: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def gumbel(
        self,
        loc: _ArrayLike[float],
        scale: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def hypergeometric(
        self, ngood: int, nbad: int, nsample: int, size: None = ...
    ) -> int: ...
    @overload
    def hypergeometric(
        self,
        ngood: _ScalarOrArray[int],
        nbad: _ScalarOrArray[int],
        nsample: _ScalarOrArray[int],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def hypergeometric(
        self, ngood: _ArrayLike[int], nbad: int, nsample: int, size: None = ...
    ) -> ndarray: ...
    @overload
    def hypergeometric(
        self, ngood: int, nbad: _ArrayLike[int], nsample: int, size: None = ...
    ) -> ndarray: ...
    @overload
    def hypergeometric(
        self, ngood: int, nbad: int, nsample: _ArrayLike[int], size: None = ...
    ) -> ndarray: ...
    @overload
    def hypergeometric(
        self,
        ngood: _ArrayLike[int],
        nbad: _ArrayLike[int],
        nsample: int,
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def hypergeometric(
        self,
        ngood: _ArrayLike[int],
        nbad: int,
        nsample: _ArrayLike[int],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def hypergeometric(
        self,
        ngood: int,
        nbad: _ArrayLike[int],
        nsample: _ArrayLike[int],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def hypergeometric(
        self,
        ngood: _ArrayLike[int],
        nbad: _ArrayLike[int],
        nsample: _ArrayLike[int],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def laplace(
        self, loc: float = ..., scale: float = ..., size: None = ...
    ) -> float: ...
    @overload
    def laplace(
        self,
        loc: _ScalarOrArray[float],
        scale: _ScalarOrArray[float],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def laplace(
        self, loc: _ArrayLike[float], scale: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def laplace(
        self, loc: float, scale: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def laplace(
        self,
        loc: _ArrayLike[float],
        scale: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def logistic(
        self, loc: float = ..., scale: float = ..., size: None = ...
    ) -> float: ...
    @overload
    def logistic(
        self,
        loc: _ScalarOrArray[float],
        scale: _ScalarOrArray[float],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def logistic(
        self, loc: _ArrayLike[float], scale: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def logistic(
        self, loc: float, scale: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def logistic(
        self,
        loc: _ArrayLike[float],
        scale: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def lognormal(
        self, mean: float = ..., sigma: float = ..., size: None = ...
    ) -> float: ...
    @overload
    def lognormal(
        self,
        mean: _ScalarOrArray[float],
        sigma: _ScalarOrArray[float],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def lognormal(
        self, mean: _ArrayLike[float], sigma: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def lognormal(
        self, mean: float, sigma: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def lognormal(
        self,
        mean: _ArrayLike[float],
        sigma: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def logseries(self, p: float, size: None = ...) -> int: ...
    @overload
    def logseries(self, p: _ScalarOrArray[float], size: _Size) -> ndarray: ...
    @overload
    def logseries(self, p: _ArrayLike[float], size: None = ...) -> ndarray: ...
    def multinomial(self, n: int, size: Optional[_Size] = ...) -> ndarray: ...
    def multivariate_normal(
        self,
        mean: ndarray,
        cov: ndarray,
        size: Optional[_Size] = ...,
        check_valid: str = ...,
        tol: float = ...,
    ) -> ndarray: ...
    @overload
    def negative_binomial(self, n: int, p: float, size: None = ...) -> int: ...
    @overload
    def negative_binomial(
        self, n: _ScalarOrArray[int], p: _ScalarOrArray[float], size: _Size
    ) -> ndarray: ...
    @overload
    def negative_binomial(
        self, n: _ArrayLike[int], p: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def negative_binomial(
        self, n: int, p: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def negative_binomial(
        self, n: _ArrayLike[int], p: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def noncentral_chisquare(
        self, df: float, nonc: float, size: None = ...
    ) -> float: ...
    @overload
    def noncentral_chisquare(
        self,
        df: _ScalarOrArray[float],
        nonc: _ScalarOrArray[float],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def noncentral_chisquare(
        self, df: _ArrayLike[float], nonc: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def noncentral_chisquare(
        self, df: float, nonc: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def noncentral_chisquare(
        self, df: _ArrayLike[float], nonc: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def noncentral_f(
        self, dfnum: float, dfden: float, nonc: float, size: None = ...
    ) -> float: ...
    @overload
    def noncentral_f(
        self,
        dfnum: _ScalarOrArray[float],
        dfden: _ScalarOrArray[float],
        nonc: _ScalarOrArray[float],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def noncentral_f(
        self,
        dfnum: _ArrayLike[float],
        dfden: float,
        nonc: float,
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def noncentral_f(
        self,
        dfnum: float,
        dfden: _ArrayLike[float],
        nonc: float,
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def noncentral_f(
        self,
        dfnum: float,
        dfden: float,
        nonc: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def noncentral_f(
        self,
        dfnum: _ArrayLike[float],
        dfden: _ArrayLike[float],
        nonc: float,
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def noncentral_f(
        self,
        dfnum: _ArrayLike[float],
        dfden: float,
        nonc: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def noncentral_f(
        self,
        dfnum: float,
        dfden: _ArrayLike[float],
        nonc: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def noncentral_f(
        self,
        dfnum: _ArrayLike[float],
        dfden: _ArrayLike[float],
        nonc: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def normal(
        self, loc: float = ..., scale: float = ..., size: None = ...
    ) -> float: ...
    @overload
    def normal(
        self,
        loc: _ScalarOrArray[float],
        scale: _ScalarOrArray[float],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def normal(
        self, loc: _ArrayLike[float], scale: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def normal(
        self, loc: float, scale: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def normal(
        self,
        loc: _ArrayLike[float],
        scale: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def pareto(self, a: float, size: None = ...) -> float: ...
    @overload
    def pareto(self, a: _ScalarOrArray[float], size: _Size) -> ndarray: ...
    @overload
    def pareto(self, a: _ArrayLike[float], size: None = ...) -> ndarray: ...
    def permutation(self, x: Union[int, ndarray]) -> ndarray: ...
    @overload
    def poisson(self, lam: float = ..., size: None = ...) -> float: ...
    @overload
    def poisson(self, lam: _ScalarOrArray[float], size: _Size) -> ndarray: ...
    @overload
    def poisson(self, lam: _ArrayLike[float], size: None = ...) -> ndarray: ...
    @overload
    def power(self, a: float, size: None = ...) -> float: ...
    @overload
    def power(self, a: _ScalarOrArray[float], size: _Size) -> ndarray: ...
    @overload
    def power(self, a: _ArrayLike[float], size: None = ...) -> ndarray: ...
    @overload
    def rand(self) -> float: ...
    @overload
    def rand(self, d0: int, *dn: int) -> ndarray: ...
    @overload
    def randint(self, low: int, high: int = ..., size: None = ...) -> int: ...
    @overload
    def randint(
        self, low: _ScalarOrArray[int], high: _ScalarOrArray[int], size: _Size
    ) -> ndarray: ...
    @overload
    def randint(
        self, low: _ArrayLike[int], high: int, size: None = ...
    ) -> ndarray: ...
    @overload
    def randint(
        self, low: int, high: _ArrayLike[int], size: None = ...
    ) -> ndarray: ...
    @overload
    def randint(
        self, low: _ArrayLike[int], high: _ArrayLike[int], size: None = ...
    ) -> ndarray: ...
    @overload
    def randn(self) -> float: ...
    @overload
    def randn(self, d0: int, *dn: int) -> ndarray: ...
    @overload
    def random_integers(
        self, low: int, high: int = ..., size: None = ...
    ) -> int: ...
    @overload
    def random_integers(
        self, low: _ScalarOrArray[int], high: _ScalarOrArray[int], size: _Size
    ) -> ndarray: ...
    @overload
    def random_integers(
        self, low: _ArrayLike[int], high: int, size: None = ...
    ) -> ndarray: ...
    @overload
    def random_integers(
        self, low: int, high: _ArrayLike[int], size: None = ...
    ) -> ndarray: ...
    @overload
    def random_integers(
        self, low: _ArrayLike[int], high: _ArrayLike[int], size: None = ...
    ) -> ndarray: ...
    @overload
    def random_sample(self, size: None = ...) -> int: ...
    @overload
    def random_sample(self, size: _Size) -> ndarray: ...
    @overload
    def rayleigh(self, scale: float, size: None = ...) -> float: ...
    @overload
    def rayleigh(
        self, scale: _ScalarOrArray[float], size: _Size
    ) -> ndarray: ...
    @overload
    def rayleigh(
        self, scale: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    def seed(
        self, seed: Union[None, int, Tuple[int], List[int]] = ...
    ) -> None: ...
    def set_state(
        self, state: Tuple[str, ndarray, int, int, float]
    ) -> None: ...
    def shuffle(self, x: _ArrayLike[Any]) -> None: ...
    @overload
    def standard_cauchy(self, size: None = ...) -> float: ...
    @overload
    def standard_cauchy(self, size: _Size) -> ndarray: ...
    @overload
    def standard_exponential(self, size: None = ...) -> float: ...
    @overload
    def standard_exponential(self, size: _Size) -> ndarray: ...
    @overload
    def standard_gamma(self, size: None = ...) -> float: ...
    @overload
    def standard_gamma(self, size: _Size) -> ndarray: ...
    @overload
    def standard_normal(self, size: None = ...) -> float: ...
    @overload
    def standard_normal(self, size: _Size) -> ndarray: ...
    @overload
    def standard_t(self, t: int, size: None = ...) -> float: ...
    @overload
    def standard_t(self, t: _ScalarOrArray[int], size: _Size) -> ndarray: ...
    @overload
    def standard_t(self, t: _ArrayLike[int], size: None = ...) -> ndarray: ...
    @overload
    def tomaxint(self, t: int, size: None = ...) -> int: ...
    @overload
    def tomaxint(self, t: _ScalarOrArray[int], size: _Size) -> ndarray: ...
    @overload
    def tomaxint(self, t: _ArrayLike[int], size: None = ...) -> ndarray: ...
    @overload
    def triangular(
        self, left: float, mode: float, right: float, size: None = ...
    ) -> float: ...
    @overload
    def triangular(
        self,
        left: _ScalarOrArray[float],
        mode: _ScalarOrArray[float],
        right: _ScalarOrArray[float],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def triangular(
        self,
        left: _ArrayLike[float],
        mode: float,
        right: float,
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def triangular(
        self,
        left: float,
        mode: _ArrayLike[float],
        right: float,
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def triangular(
        self,
        left: float,
        mode: float,
        right: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def triangular(
        self,
        left: _ArrayLike[float],
        mode: _ArrayLike[float],
        right: float,
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def triangular(
        self,
        left: _ArrayLike[float],
        mode: float,
        right: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def triangular(
        self,
        left: float,
        mode: _ArrayLike[float],
        right: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def triangular(
        self,
        left: _ArrayLike[float],
        mode: _ArrayLike[float],
        right: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def uniform(
        self, low: float = ..., high: float = ..., size: None = ...
    ) -> float: ...
    @overload
    def uniform(
        self,
        low: _ScalarOrArray[float],
        high: _ScalarOrArray[float],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def uniform(
        self, low: _ArrayLike[float], high: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def uniform(
        self, low: float, high: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def uniform(
        self, low: _ArrayLike[float], high: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def vonmises(self, mu: float, kappa: float, size: None = ...) -> float: ...
    @overload
    def vonmises(
        self,
        mu: _ScalarOrArray[float],
        kappa: _ScalarOrArray[float],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def vonmises(
        self, mu: _ArrayLike[float], kappa: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def vonmises(
        self, mu: float, kappa: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def vonmises(
        self, mu: _ArrayLike[float], kappa: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def wald(self, mean: float, scale: float, size: None = ...) -> float: ...
    @overload
    def wald(
        self,
        mean: _ScalarOrArray[float],
        scale: _ScalarOrArray[float],
        size: _Size,
    ) -> ndarray: ...
    @overload
    def wald(
        self, mean: _ArrayLike[float], scale: float, size: None = ...
    ) -> ndarray: ...
    @overload
    def wald(
        self, mean: float, scale: _ArrayLike[float], size: None = ...
    ) -> ndarray: ...
    @overload
    def wald(
        self,
        mean: _ArrayLike[float],
        scale: _ArrayLike[float],
        size: None = ...,
    ) -> ndarray: ...
    @overload
    def weibull(self, a: float, size: None = ...) -> float: ...
    @overload
    def weibull(self, a: _ScalarOrArray[float], size: _Size) -> ndarray: ...
    @overload
    def weibull(self, a: _ArrayLike[float], size: None = ...) -> ndarray: ...
    @overload
    def zipf(self, a: float, size: None = ...) -> int: ...
    @overload
    def zipf(self, a: _ScalarOrArray[float], size: _Size) -> ndarray: ...
    @overload
    def zipf(self, a: _ArrayLike[float], size: None = ...) -> ndarray: ...
